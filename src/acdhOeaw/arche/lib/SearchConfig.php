<?php

/*
 * The MIT License
 *
 * Copyright 2019 Austrian Centre for Digital Humanities.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

namespace acdhOeaw\arche\lib;

/**
 * Stores the repository search configuration, e.g. full text search options and pagination options.
 *
 * @author zozlak
 */
class SearchConfig {

    const FTS_BINARY = 'BINARY';

    /**
     * 
     * @var array<string>
     */
    static private array $highlightParam = [
        'StartSel', 'StopSel', 'MaxWords', 'MinWords',
        'ShortWord', 'HighlightAll', 'MaxFragments', 'FragmentDelimiter'
    ];

    /**
     * Creates an instance of the SearchConfig class from the POST data or 
     * given array.
     * 
     * @param array<string, string> $src source array. If not provided, $_POST
     *   is used instead.
     * @return SearchConfig
     */
    static public function factory(array $src = null): SearchConfig {
        if ($src === null) {
            $src = $_POST;
        }
        $sc = new SearchConfig();
        foreach ((array) $sc as $k => $v) {
            if (isset($src[$k])) {
                $sc->$k = $src[$k];
            } elseif (isset($src[$k . '[]'])) {
                $sc->$k = $src[$k . '[]'];
            }
        }

        return $sc;
    }

    /**
     * Controls amount of metadata included in the search results.
     * 
     * Value should be one of `RepoResourceInterface::META_*` constants.
     * 
     * @see \acdhOeaw\arche\lib\RepoResourceInterface::META_RESOURCE
     */
    public ?string $metadataMode = null;

    /**
     * RDF predicate used by some of metadataModes.
     */
    public ?string $metadataParentProperty = null;

    /**
     * Maximum number of returned resources (only resources matched by the search
     * are counted - see `$metadataMode`).
     */
    public ?int $limit = null;

    /**
     * Offset of the first returned result.
     * 
     * Remember your search results must be ordered if you want get stable results.
     */
    public ?int $offset = null;

    /**
     * Total number of resources matching the search (despite limit/offset)
     * 
     * Set by RepoInterface::getGraphBy*() and RepoInterface::getResourceBy*() 
     * methods.
     */
    public ?int $count = null;

    /**
     * List of metadata properties to order results by.
     * 
     * Only literal values are used for ordering.
     * 
     * @var array<string>
     */
    public array $orderBy = [];

    /**
     * If specified, only property values with a given language are taken into
     * account for ordering search matches.
     */
    public ?string $orderByLang = null;

    /**
     * If specified, determines the collation used for ordering the search results.
     * The collation must be available for the underlying database. 
     */
    public ?string $orderByCollation = null;

    /**
     * List of metadata properties to fetch for the resource.
     * 
     * If empty, all properties are fetched.
     * 
     * Doesn't affect technical properties generated by the search.
     * 
     * @var array<string>
     */
    public array $resourceProperties = [];

    /**
     * List of metadata properties to fetch for relative-according-to-metadata-read-mode
     * resources.
     * 
     * If empty, all properties are fetched.
     * 
     * @var array<string>
     */
    public array $relativesProperties = [];

    /**
     * A full text search query used for search results highlighting.
     * 
     * See https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES
     * and the websearch_to_tsquery() function documentation.
     * 
     * @var string|array<string>
     */
    public string | array $ftsQuery = [];

    /**
     * Limits highlighting to indicated properties.
     * 
     * 
     * If single value is used, it is applied to all FTS queries.
     * If array is used, it has to have same length as the $ftsQuery
     * and values are applied to corresponding queries.
     * 
     * A value can be either a string or an array of string (meaning any of
     * given properties).
     * 
     * Use `SearchConfig::FTS_BINARY` to indicate binary content.
     * 
     * @var array<string|array<string>>
     */
    public array $ftsProperty = [];

    /**
     * Full text search highlighting options see - https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-HEADLINE
     * 
     * If single value is used, it is applied to all FTS queries.
     * If array is used, it has to have same length as the $ftsQuery
     * and values are applied to corresponding queries.
     * 
     * @var string|array<string>
     */
    public string | array $ftsStartSel = [];

    /**
     * Full text search highlighting options see - https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-HEADLINE
     * 
     * If single value is used, it is applied to all FTS queries.
     * If array is used, it has to have same length as the $ftsQuery
     * and values are applied to corresponding queries.
     * 
     * @var string|array<string>
     */
    public string | array $ftsStopSel = [];

    /**
     * Full text search highlighting options see - https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-HEADLINE
     * 
     * If single value is used, it is applied to all FTS queries.
     * If array is used, it has to have same length as the $ftsQuery
     * and values are applied to corresponding queries.
     * 
     * @var int|array<int>
     */
    public int | array $ftsMaxWords = [];

    /**
     * Full text search highlighting options see - https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-HEADLINE
     * 
     * If single value is used, it is applied to all FTS queries.
     * If array is used, it has to have same length as the $ftsQuery
     * and values are applied to corresponding queries.
     * 
     * @var int|array<int>
     */
    public int | array $ftsMinWords = [];

    /**
     * Full text search highlighting options see - https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-HEADLINE
     * 
     * If single value is used, it is applied to all FTS queries.
     * If array is used, it has to have same length as the $ftsQuery
     * and values are applied to corresponding queries.
     * 
     * @var int|array<int>
     */
    public int | array $ftsShortWord = [];

    /**
     * Full text search highlighting options see - https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-HEADLINE
     * 
     * If single value is used, it is applied to all FTS queries.
     * If array is used, it has to have same length as the $ftsQuery
     * and values are applied to corresponding queries.
     * 
     * @var bool|array<bool>
     */
    public bool | array $ftsHighlightAll = [];

    /**
     * Full text search highlighting options see - https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-HEADLINE
     * 
     * If single value is used, it is applied to all FTS queries.
     * If array is used, it has to have same length as the $ftsQuery
     * and values are applied to corresponding queries.
     * 
     * @var int|array<int>
     */
    public int | array $ftsMaxFragments = [];

    /**
     * Full text search highlighting options see - https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-HEADLINE
     * 
     * If single value is used, it is applied to all FTS queries.
     * If array is used, it has to have same length as the $ftsQuery
     * and values are applied to corresponding queries.
     * 
     * @var string|array<string>
     */
    public string | array $ftsFragmentDelimiter = [];

    /**
     * An optional class of the for the objects returned as the search results
     *   (to be used by extension libraries).
     */
    public ?string $class = null;

    /**
     * Should artificially generated search properties denoting search match,
     * ordering, FTS highlighting, etc. be skipped or included.
     */
    public bool $skipArtificialProperties = false;

    /**
     * 
     * @return array<mixed>
     */
    public function toArray(): array {
        $skip = [
            'class', 'metadataMode', 'metadataParentProperty',
            'resourceProperties', 'relativesProperties',
        ];
        $a    = [];
        foreach ((array) $this as $k => $v) {
            if (!in_array($k, $skip) && !empty($v)) {
                $a[$k] = $v;
            }
        }
        return $a;
    }

    /**
     * Returns HTTP request headers setting metadata read mode and metadata parent property
     * according to the search config settings.
     * 
     * @param Repo $repo
     * @return array<string>
     */
    public function getHeaders(Repo $repo): array {
        $h = [];
        if (!empty($this->metadataMode)) {
            $h[$repo->getHeaderName('metadataReadMode')] = $this->metadataMode;
        }
        if (!empty($this->metadataParentProperty)) {
            $h[$repo->getHeaderName('metadataParentProperty')] = $this->metadataParentProperty;
        }
        if (count($this->resourceProperties) > 0) {
            $h[$repo->getHeaderName('resourceProperties')] = implode(',', $this->resourceProperties);
        }
        if (count($this->relativesProperties) > 0) {
            $h[$repo->getHeaderName('relativesProperties')] = implode(',', $this->relativesProperties);
        }
        return $h;
    }

    public function toQuery(): string {
        return http_build_query($this->toArray());
    }

    public function getTsHeadlineOptions(int $offset): string {
        $options = '';
        foreach (self::$highlightParam as $i) {
            $ii = 'fts' . $i;
            $v  = is_array($this->$ii) ? ($this->$ii[$offset] ?? null) : $this->$ii;
            if ($v !== null) {
                $options .= ",$i=$v";
            }
        }
        return substr($options, 1);
    }

    /**
     * Fills up $ftsQuery and $ftsProperty property values based on
     * the supported SearchTerm list.
     * 
     * @param array<SearchTerm> $terms
     */
    public function readFtsConfigFromTerms(array $terms): void {
        if (!is_array($this->ftsQuery)) {
            $this->ftsQuery = [$this->ftsQuery];
        }
        if (!is_array($this->ftsProperty)) {
            $this->ftsProperty = [$this->ftsProperty];
        }
        foreach ($terms as $term) {
            /* @var $term SearchTerm */
            if ($term->operator === SearchTerm::OPERATOR_FTS && !empty($term->value)) {
                $properties = [];
                if (!empty($term->property)) {
                    $properties = !is_array($term->property) ? [$term->property] : $term->property;
                }
                $values = is_array($term->value) ? $term->value : [$term->value];
                foreach ($values as $value) {
                    if (!empty($value)) {
                        $this->ftsQuery[]    = $value;
                        $this->ftsProperty[] = $properties;
                    }
                }
            }
        }
    }

    /**
     * Returns an object with all fts properties being arrays of the same count 
     * as the $ftsQuery property. Also, all $ftsProperty value is assured to be
     * an array.
     * 
     * @return self
     */
    public function getSanitizedCopy(): self {
        $ret = clone $this;
        if (!is_array($ret->ftsQuery)) {
            $ret->ftsQuery = [$ret->ftsQuery];
        }
        $n = count($ret->ftsQuery);
        foreach (get_object_vars($ret) as $k => $v) {
            if (str_starts_with($k, 'fts') && !is_array($v)) {
                $ret->$k = array_fill(0, $n, $ret->$k);
            }
        }
        foreach ($ret->ftsProperty as &$i) {
            if (!is_array($i)) {
                $i = [$i];
            }
        }
        unset($i);
        return $ret;
    }
}
